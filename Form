An HTML <form> element is responsible for collecting information to send somewhere else. 
HTML <form>元素负责收集要发送到其他地方的信息。

Every time we browse the internet we come into contact with many forms and we might not even realize it. 
每次浏览互联网时，我们都会接触到许多形式，甚至可能没有意识到。

There’s a good chance that if you’re typing into a text field or providing an input, the field that you’re typing into is part of a <form>!
如果您要输入文本字段或提供输入，则很有可能您输入的字段是<form>的一部分！

# ----------------------------------------------------------------------------------------------------------------------------------------------
1. The purpose of a <form> is to allow users to input information and send it. The <form>‘s action attribute determines where the form’s information goes.
    The <form>‘s method attribute determines how the information is sent and processed.
     <form>的目的是允许用户输入信息并将其发送。 <form>的action属性确定表单信息的去向。<form>的method属性确定信息的发送和处理方式。
     ex:<form action="filepath" method="POST></form>

2. To add fields for users to input information we use the <input> element and set the type attribute to a field of our choosing:
   为了添加字段供用户输入信息，我们使用<input>元素并将type属性设置为我们选择的字段：
   
  Setting type to "text" creates a single row field for text input.
  将类型设置为“文本”将为文本输入创建一个单行字段。
  
  Setting type to "password" creates a single row field that censors text input.
  将类型设置为“ password”会创建一个检查文本输入的单行字段。
  
  Setting type to "number" creates a single row field for number input.
  将类型设置为“数字”会创建一个用于输入数字的单行字段。
  
  Setting type to "range" creates a slider to select from a range of numbers.
  将类型设置为“范围”会创建一个滑块，以从一系列数字中进行选择。
  
  Setting type to "checkbox" creates a single checkbox which can be paired with other checkboxes.
  将类型设置为“复选框”将创建一个可以与其他复选框配对的复选框。
  
  Setting type to "radio" creates a radio button that can be paired with other radio buttons.
  将类型设置为“单选”会创建一个单选按钮，可以将其与其他单选按钮配对。
  
  Setting type to "list" will pair the <input> with a <datalist> element if the id of both are the same.
  如果将type设置为“ list”，则如果它们的ID相同，则会将<input>与<datalist>元素配对。
  
  Setting type to "submit" creates a submit button.
  将类型设置为“提交”将创建一个提交按钮。
    
3. A <select> element is populated with <option> elements and renders a dropdown list selection.
   <select>元素填充有<option>元素，并呈现一个下拉列表选择。
   
4. A <datalist> element is populated with <option> elements and works with an <input> to search through choices.
   <datalist>元素填充有<option>元素，并与<input>一起搜索选项。

5. A <textarea> element is a text input field that has a customizable area.
   <textarea>元素是具有可定制区域的文本输入字段。
   
6. When a <form> is submitted, the name of the fields that accept input and the value of those fields are sent as name=value pairs.
   提交<form>时，接受输入的字段名称和这些字段的值将作为“名称=值”对发送。
   
# ----------------------------------------------------------------------------------------------------------------------------------------------
example:
code:
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" type="text/css" href="style.css">
    <link href="https://fonts.googleapis.com/css?family=Rubik" rel="stylesheet">
    <title>Forms Review</title>
  </head>
  <body>
    <section id="overlay">
      <img src="https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-6/htmlcss1-img_burger-logo.svg" alt="Davie's Burgers Logo" id="logo">
      <hr>
      
      ########################  <form>
      <form action="submission.html" method="POST">
				<h1>Create a burger!</h1>
        <section class="protein">
          ########################  <label>
          <label for="patty">What type of protein would you like?</label>
          
          ########################  <input>
          ########################  type="text"
    			<input type="text" name="patty" id="patty">
        </section>
        <hr>
        
        <section class="patties">
          <label for="amount">How many patties would you like?</label>
          
          
          
          ########################  type="number"
          <input type="number" name="amount" id="amount">
        </section>
        <hr>
        
        <section class="cooked">
          <label for="doneness">How do you want your patty cooked</label>
          <br>
          <span>Rare</span>
          
          ########################  type="range"
          <input type="range" name="doneness" id="doneness" value="3" min="1" max="5">
          <span>Well-Done</span>
        </section>
        <hr>
        
        <section class="toppings">
          <span>What toppings would you like?</span>
          <br>
          
          ########################  type="checkbox"
          <input type="checkbox" name="topping" id="lettuce" value="lettuce">
          <label for="lettuce">Lettuce</label>
          <input type="checkbox" name="topping" id="tomato" value="tomato">
          <label for="tomato">Tomato</label>
          <input type="checkbox" name="topping" id="onion" value="onion">
          <label for="onion">Onion</label>
        </section>
        <hr>
        
        <section class="cheesy">
          <span>Would you like to add cheese?</span>
          <br>
          
          ########################  type="radio"
          <input type="radio" name="cheese" id="yes" value="yes">
          <label for="yes">Yes</label>
          <input type="radio" name="cheese" id="no" value="yes">
          <label for="no">No</label>
        </section>
        <hr>
       
        <section class="bun-type">
          <label for="bun">What type of bun would you like?</label>
          
          ########################  <select>
          <select name="bun" id="bun">
            <option value="sesame">Sesame</option>
            <option value="potatoe">Potato</option>
            <option value="pretzel">Pretzel</option>
          </select>
        </section>
        <hr>
        
        <section class="sauce-selection">
          <label for="sauce">What type of sauce would you like?</label>
          <input list="sauces" id="sauce" name="sauce">
          
          ########################  <datalist>
          <datalist id="sauces">
            <option value="ketchup"></option>
            <option value="mayo"></option>
            <option value="mustard"></option>
          </datalist>
        </section>
        <hr>
        <section class="extra-info">
          <label for="extra">Anything else you want to add?</label>
          <br>
          
          ########################  <textarea>
          <textarea id="extra" name="extra" rows="3" cols="40"></textarea>
        </section>
        <hr>

        <section class="submission">
          
          ########################  type="submit"
          <input type="submit" value="Submit">
        </section>
      </form>
    </section>
  </body>
</html>





# ----------------------------------------------------------------------------------------------------------------------------------------------
1. Client-side validations happen in the browser before information is sent to a server.
   在将信息发送到服务器之前，客户端验证在浏览器中进行。
   
2. Adding the required attribute to an input related element will validate that the input field has information in it.
   将所需属性添加到与输入相关的元素中将验证输入字段中是否包含信息。
   
3. Assigning a value to the min attribute of a number input element will validate an acceptable minimum value.
   为数字输入元素的min属性分配值将验证可接受的最小值。
   
4. Assigning a value to the max attribute of a number input element will validate an acceptable maximum value.
   将值分配给数字输入元素的max属性将验证可接受的最大值。
   
5. Assigning a value to the minlength attribute of a text input element will validate an acceptable minimum number of characters.
   为文本输入元素的minlength属性分配一个值将验证可接受的最小字符数。
   
6. Assigning a value to the maxlength attribute of a text input element will validate an acceptable maximum number of characters.
   为文本输入元素的maxlength属性分配一个值将验证可接受的最大字符数。
   
7. Assigning a regex to pattern matches the input to the provided regex.
   为模式分配正则表达式会将输入匹配到提供的正则表达式。
   
If validations on a <form> do not pass, the user gets a message explaining why and the <form> cannot be submitted.
如果未通过<form>上的验证，则用户将收到一条消息，说明原因，并且<form>无法提交。

# ----------------------------------------------------------------------------------------------------------------------------------------------
example:
code:
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Sign Up Page</title>
    <link rel="stylesheet" href="style.css" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Fjalla+One" rel="stylesheet">
  </head>
  <body>
    <section class="overlay">
			<h1>Sign Up</h1>
      <p>Create an account:</p>
      <form action="submission.html" method="GET">
        <label for="username">Username:</label>
        <br>
				<!--Add the pattern attribute to the input below-->
				<input id="username" name="username" type="text"  minlength="3" maxlength="15" required pattern="[a-zA-Z0-9]+">
        <br>
        <label for="pw">Password:</label>
        <br>
				<input id="pw" name="pw" type="password" minlength="8" maxlength="15" required>
        <br>
        <input type="submit" value="Submit">
      </form>
    </section>
  </body>
</html>

# ----------------------------------------------------------------------------------------------------------------------------------------------

done.
